---
// filepath: /home/paulj/Main/Dev/active_projects/Blog/homepage/src/pages/playground/stars/css.astro

// Define star interface
interface Star {
  size: number;
  x: number;
  y: number;
}

// Define star layer configuration interface
interface StarLayer {
  id: string;
  count: number;
  minSize: number;
  maxSize: number;
  animationName: string;
  animationDuration: number;
}

// Function to generate random stars
function generateStars(count: number, minSize: number, maxSize: number): Star[] {
  return Array.from({ length: count }, () => ({
    size: Math.random() * (maxSize - minSize) + minSize,
    x: Math.random() * 100,
    y: Math.random() * 100
  }));
}

// Helper function to create CSS gradient string for a layer
function createStarGradients(stars: Star[]): string {
  return stars
    .map(star => {
      const size = star.size.toFixed(1);
      return `radial-gradient(${size}px ${size}px at ${star.x.toFixed(1)}% ${star.y.toFixed(1)}%, white, rgba(255, 255, 255, 0))`;
    })
    .join(',\n        ');
}

// Define all star layer configurations in one place
const starLayers: StarLayer[] = [
  { id: "tiny", count: 40, minSize: 0.5, maxSize: 0.8, animationName: "twinkle-1", animationDuration: 13 },
  { id: "small", count: 25, minSize: 0.8, maxSize: 1.2, animationName: "twinkle-2", animationDuration: 8 },
  { id: "medium", count: 20, minSize: 1.3, maxSize: 1.7, animationName: "twinkle-3", animationDuration: 10 },
  { id: "large", count: 15, minSize: 1.8, maxSize: 2.2, animationName: "twinkle-4", animationDuration: 12 },
  { id: "extra", count: 8, minSize: 2.8, maxSize: 3.2, animationName: "twinkle-1", animationDuration: 15 },
  { id: "mixed", count: 30, minSize: 1.0, maxSize: 2.5, animationName: "twinkle-3", animationDuration: 17 }
];

// Generate star data and gradients for each layer
const layerData = starLayers.map(layer => {
  const stars = generateStars(layer.count, layer.minSize, layer.maxSize);
  return {
    ...layer,
    stars,
    gradient: createStarGradients(stars)
  };
});

// Create twinkle animations with different patterns
const twinkleAnimations = [
  {
    name: "twinkle-1",
    keyframes: `
      0%, 80%, 100% { opacity: 0.7; }
      40% { opacity: 1; }
    `
  },
  {
    name: "twinkle-2",
    keyframes: `
      0%, 100% { opacity: 0.6; }
      50% { opacity: 0.9; }
    `
  },
  {
    name: "twinkle-3",
    keyframes: `
      0%, 20%, 60%, 100% { opacity: 0.8; }
      40%, 80% { opacity: 1; }
    `
  },
  {
    name: "twinkle-4",
    keyframes: `
      0%, 33%, 66%, 100% { opacity: 0.7; }
      16%, 50%, 83% { opacity: 1; }
    `
  }
];
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CSS Starry Background</title>
</head>
<body>
  <!-- Generate all star layers from the configuration -->
  {layerData.map(layer => (
    <div 
      class={`stars-layer stars-${layer.id}`}
      style={`
        background-image: ${layer.gradient};
        animation: ${layer.animationName} ${layer.animationDuration}s infinite;
      `}
    ></div>
  ))}

  <div class="content-container">
    <div class="viewing-window">
      <!-- This is where the stars will be visible through -->
      <h1>Starry Background</h1>
      <p>Scroll down to see the parallax effect</p>
    </div>

    <!-- Add more content to enable scrolling -->
    <div class="scrollable-content">
      {Array.from({ length: 20 }).map((_, i) => (
        <p>Scrollable content section {i + 1}</p>
      ))}
    </div>
  </div>

  <style>
    /* Reset and full page setup */
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      overflow-x: hidden;
      font-family: system-ui, sans-serif;
      background-color: #000;
      color: white;
    }

    /* Stars base layer - shared properties */
    .stars-layer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 0;
    }

    /* Content container */
    .content-container {
      position: relative;
      z-index: 1;
      min-height: 100vh;
      padding: 2rem;
      box-sizing: border-box;
    }

    /* Viewing window where stars are visible */
    .viewing-window {
      background-color: transparent;
      border-radius: 16px;
      padding: 2rem;
      margin: 2rem auto;
      max-width: 800px;
      position: relative;
      box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
    }

    /* Scrollable content styling */
    .scrollable-content {
      background-color: rgba(30, 30, 50, 0.8);
      border-radius: 16px;
      padding: 2rem;
      margin: 2rem auto;
      max-width: 800px;
    }

    /* Generate all twinkle animations from the configuration */
    {twinkleAnimations.map(animation => (
      `@keyframes ${animation.name} {
        ${animation.keyframes}
      }`
    ))}
  </style>
</body>
</html>