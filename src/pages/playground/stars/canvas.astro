---
// filepath: /home/paulj/Main/Dev/active_projects/Blog/homepage/src/pages/playground/stars/hybrid.astro

// Define star interface
interface Star {
  x: number;
  y: number;
  size: number;
  opacity: number;
  twinkleSpeed: number;
  twinkleOffset: number;
}

// Define star layer configuration interface
interface StarLayer {
  id: string;
  count: number;
  minSize: number;
  maxSize: number;
  minOpacity: number;
  maxOpacity: number;
  cssAnimationName?: string;
  cssAnimationDuration?: number;
}

// Function to generate random stars
function generateStars(config: StarLayer): Star[] {
  return Array.from({ length: config.count }, () => ({
    x: Math.random() * 100, // % position
    y: Math.random() * 100, // % position
    size: Math.random() * (config.maxSize - config.minSize) + config.minSize,
    opacity: Math.random() * (config.maxOpacity - config.minOpacity) + config.minOpacity,
    twinkleSpeed: Math.random() * 0.01 + 0.005, // Speed of twinkling
    twinkleOffset: Math.random() * Math.PI * 2 // Random starting point in cycle
  }));
}

// Function to create CSS gradient string for fallback
function createStarGradients(stars: Star[]): string {
  return stars
    .map(star => {
      const size = star.size.toFixed(1);
      return `radial-gradient(${size}px ${size}px at ${star.x.toFixed(1)}% ${star.y.toFixed(1)}%, white, rgba(255, 255, 255, 0))`;
    })
    .join(',\n        ');
}

// Define all star layer configurations
const starLayers: StarLayer[] = [
  { id: "tiny", count: 100, minSize: 0.5, maxSize: 0.8, minOpacity: 0.3, maxOpacity: 0.6, cssAnimationName: "twinkle-1", cssAnimationDuration: 13 },
  { id: "small", count: 80, minSize: 0.8, maxSize: 1.2, minOpacity: 0.4, maxOpacity: 0.7, cssAnimationName: "twinkle-2", cssAnimationDuration: 8 },
  { id: "medium", count: 50, minSize: 1.3, maxSize: 1.7, minOpacity: 0.5, maxOpacity: 0.8, cssAnimationName: "twinkle-3", cssAnimationDuration: 10 },
  { id: "large", count: 25, minSize: 1.8, maxSize: 2.2, minOpacity: 0.6, maxOpacity: 0.9, cssAnimationName: "twinkle-4", cssAnimationDuration: 12 },
  { id: "extra", count: 15, minSize: 2.8, maxSize: 3.2, minOpacity: 0.7, maxOpacity: 1.0, cssAnimationName: "twinkle-1", cssAnimationDuration: 15 }
];

// Generate stars for all layers
const allStars: Star[] = starLayers.flatMap(layer => generateStars(layer));

// Generate CSS data for the fallback
const layerData = starLayers.map(layer => {
  const stars = generateStars(layer);
  return {
    ...layer,
    gradient: createStarGradients(stars)
  };
});

// Create twinkle animations with different patterns
const twinkleAnimations = [
  {
    name: "twinkle-1",
    keyframes: `
      0%, 80%, 100% { opacity: 0.7; }
      40% { opacity: 1; }
    `
  },
  {
    name: "twinkle-2",
    keyframes: `
      0%, 100% { opacity: 0.6; }
      50% { opacity: 0.9; }
    `
  },
  {
    name: "twinkle-3",
    keyframes: `
      0%, 20%, 60%, 100% { opacity: 0.8; }
      40%, 80% { opacity: 1; }
    `
  },
  {
    name: "twinkle-4",
    keyframes: `
      0%, 33%, 66%, 100% { opacity: 0.7; }
      16%, 50%, 83% { opacity: 1; }
    `
  }
];

// Serialize the star data for client-side use
const serializedStars = JSON.stringify(allStars);
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hybrid Starry Background</title>
</head>
<body>
  <!-- Canvas for modern browsers -->
  <canvas id="starCanvas" class="js-only"></canvas>
  
  <!-- CSS fallback for browsers without JavaScript -->
  <noscript>
    {layerData.map(layer => (
      <div 
        class={`stars-layer stars-${layer.id}`}
        style={`
          background-image: ${layer.gradient};
          animation: ${layer.cssAnimationName} ${layer.cssAnimationDuration}s infinite;
        `}
      ></div>
    ))}
  </noscript>

  <div class="content-container">
    <div class="viewing-window">
      <!-- This is where the stars will be visible through -->
      <h1>Hybrid Starry Background</h1>
      <p>Scroll down to see the parallax effect</p>
    </div>

    <!-- Add more content to enable scrolling -->
    <div class="scrollable-content">
      {Array.from({ length: 20 }).map((_, i) => (
        <p>Scrollable content section {i + 1}</p>
      ))}
    </div>
  </div>

  <style>
    /* Reset and full page setup */
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      overflow-x: hidden;
      font-family: system-ui, sans-serif;
      background-color: #000;
      color: white;
    }

    /* Hide JS elements initially */
    .js-only {
      display: none;
    }

    /* Canvas styling */
    #starCanvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none; /* Allow clicks to pass through */
      z-index: 0;
    }

    /* Stars base layer - shared properties for fallback */
    .stars-layer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 0;
    }

    /* Content container */
    .content-container {
      position: relative;
      z-index: 1;
      min-height: 100vh;
      padding: 2rem;
      box-sizing: border-box;
    }

    /* Viewing window where stars are visible */
    .viewing-window {
      background-color: transparent;
      border-radius: 16px;
      padding: 2rem;
      margin: 2rem auto;
      max-width: 800px;
      position: relative;
      box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
    }

    /* Scrollable content styling */
    .scrollable-content {
      background-color: rgba(30, 30, 50, 0.8);
      border-radius: 16px;
      padding: 2rem;
      margin: 2rem auto;
      max-width: 800px;
    }

    /* Generate all twinkle animations from the configuration for fallback */
    {twinkleAnimations.map(animation => (
      `@keyframes ${animation.name} {
        ${animation.keyframes}
      }`
    ))}
  </style>

  <script define:vars={{ stars: serializedStars }}>
    document.addEventListener('DOMContentLoaded', () => {
      // Show JS elements
      document.querySelectorAll('.js-only').forEach(el => {
        el.style.display = 'block';
      });
      
      // Parse the star data from Astro
      const allStars = JSON.parse(stars);
      
      // Get the canvas and context
      const canvas = document.getElementById('starCanvas');
      const ctx = canvas.getContext('2d');
      
      // Set canvas dimensions to match window
      function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }
      
      // Initial resize
      resizeCanvas();
      
      // Handle window resize
      window.addEventListener('resize', resizeCanvas);
      
      // Animation frame handling
      let animationFrame;
      let lastTime = 0;
      
      // Main animation loop
      function animateStars(currentTime) {
        // Calculate time delta
        const deltaTime = currentTime - lastTime;
        lastTime = currentTime;
        
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Draw each star with twinkling effect
        allStars.forEach(star => {
          // Convert percentage to actual pixels
          const x = star.x * canvas.width / 100;
          const y = star.y * canvas.height / 100;
          
          // Calculate current opacity based on time
          const twinkling = Math.sin(currentTime * star.twinkleSpeed + star.twinkleOffset);
          const currentOpacity = star.opacity + twinkling * 0.2; // Oscillate opacity by Â±0.2
          
          // Draw star
          ctx.beginPath();
          ctx.arc(x, y, star.size / 2, 0, Math.PI * 2);
          ctx.fillStyle = `rgba(255, 255, 255, ${currentOpacity})`;
          ctx.fill();
          
          // Optional: add glow effect for larger stars
          if (star.size > 1.5) {
            ctx.beginPath();
            ctx.arc(x, y, star.size, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255, 255, 255, ${currentOpacity * 0.3})`;
            ctx.filter = 'blur(1px)';
            ctx.fill();
            ctx.filter = 'none';
          }
        });
        
        // Continue animation
        animationFrame = requestAnimationFrame(animateStars);
      }
      
      // Start animation
      animationFrame = requestAnimationFrame(animateStars);
      
      // Clean up on page leave
      window.addEventListener('beforeunload', () => {
        if (animationFrame) {
          cancelAnimationFrame(animationFrame);
        }
      });
      
      // Handle visibility changes
      document.addEventListener('visibilitychange', () => {
        if (document.hidden && animationFrame) {
          cancelAnimationFrame(animationFrame);
          animationFrame = null;
        } else if (!document.hidden && !animationFrame) {
          lastTime = performance.now();
          animationFrame = requestAnimationFrame(animateStars);
        }
      });
    });
  </script>
</body>
</html>